apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: heart-failure-prediction-ingress
  namespace: heart-failure-prediction
  labels:
    app: heart-failure-prediction
  annotations:
    # NGINX Ingress Controller annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # CORS configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    
    # Cert-manager for automatic SSL
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # AWS ALB annotations (alternative to NGINX)
    # kubernetes.io/ingress.class: alb
    # alb.ingress.kubernetes.io/scheme: internet-facing
    # alb.ingress.kubernetes.io/target-type: ip
    # alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    # alb.ingress.kubernetes.io/ssl-redirect: '443'
    
    # Azure Application Gateway annotations (alternative)
    # kubernetes.io/ingress.class: azure/application-gateway
    # appgw.ingress.kubernetes.io/ssl-redirect: "true"
    
    # GCP GCE annotations (alternative)
    # kubernetes.io/ingress.class: "gce"
    # ingress.gcp.kubernetes.io/managed-certificates: "heart-failure-ssl-cert"

spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - heart-failure-prediction.example.com
    - www.heart-failure-prediction.example.com
    secretName: heart-failure-prediction-tls
  
  rules:
  - host: heart-failure-prediction.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: heart-failure-prediction-service
            port:
              number: 80
  
  - host: www.heart-failure-prediction.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: heart-failure-prediction-service
            port:
              number: 80

---
# Development/staging ingress without SSL
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: heart-failure-prediction-dev-ingress
  namespace: heart-failure-prediction
  labels:
    app: heart-failure-prediction
    environment: development
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
spec:
  ingressClassName: nginx
  rules:
  - host: heart-failure-dev.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: heart-failure-prediction-service
            port:
              number: 80
  - host: localhost
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: heart-failure-prediction-service
            port:
              number: 80

---
# ClusterIssuer for Let's Encrypt certificates
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # Replace with your email
    email: admin@example.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-prod-private-key
    solvers:
    - http01:
        ingress:
          class: nginx